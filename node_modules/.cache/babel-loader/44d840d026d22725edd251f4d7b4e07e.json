{"ast":null,"code":"var _jsxFileName = \"/Users/shigimcp_1215/Sites/shigimcp2020-react_swept/src/work/Work_EA.jsx\";\n//#region ==================== IMPORTS ====================\nimport React from 'react';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\nimport Masonry, { ResponsiveMasonry } from 'react-responsive-masonry';\nimport Moment from 'react-moment';\nimport { gsap } from 'gsap';\nimport '../stylesheets/Work.scss'; //#region -------------------- IMPORTS: DATA --------------------\n// import work from '../data/MyData';\n\nimport work from '../data/json/work_json/work_ea.json'; //#endregion -------------------- IMPORTS: DATA --------------------\n//#endregion ==================== IMPORTS ====================\n\nconst remoteLoc = 'https://www.shigimcp.com/Xstage/shigimcp_2020_react/img/'; //#region ==================== FUNCTION: workList() ====================\n\nfunction WorkList() {\n  //#region ==================== ASSETS Ref ====================\n  const workItemRef = useRef(null);\n  const masonryImgRef = useRef(null); //#endregion ==================== ASSETS Ref ====================\n  //#region ==================== FUNCTION: handleClick(whatIsThis ====================\n\n  function handleClick(thisWorkImage) {\n    let thisWorkImageID = thisWorkImage.album_id + thisWorkImage.image_index + '_imgID';\n    console.log('thisWorkImageID = thisWorkImage.album_id + thisWorkImage.image_index = ' + thisWorkImageID);\n  } //#endregion ==================== FUNCTION: handleClick(whatIsThis ====================\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"workList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"Banners\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"I want to eventually make these images clickable to trigger GSAP banners like the ones above that were [re]built in React (because I couldn't get react-adobe-animate or html-loader to work).\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 207\n    }\n  }), \"Ideally, the GSAP banners will play in place like they do on this page: \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://www.shigimcp.com/hilites.html\",\n    target: \"_new\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 89\n    }\n  }, \"https://www.shigimcp.com/hilites.html\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 193\n    }\n  }), \"SO FAR: \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"./000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, \" See \\\"000\\\" above\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ResponsiveMasonry, {\n    columnsCountBreakPoints: {\n      360: 1,\n      640: 2,\n      768: 2,\n      940: 3,\n      1640: 4,\n      1920: 5,\n      3000: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Masonry, {\n    gutter: \"50px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, work.filter(isBanner => isBanner.format === 'banner').map(workImage => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"workItem\",\n    key: workImage.album_id + workImage.image_index,\n    ref: workItemRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"masonryDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"masonryImg\",\n    id: workImage.album_id + workImage.image_index + '_imgID',\n    src: remoteLoc + workImage.album_id + '/sl/' + workImage.src,\n    alt: 'album_id: ' + workImage.album_id + workImage.image_index,\n    ref: masonryImgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bannerContainer\",\n    id: workImage.album_id + workImage.image_index + '_bannerID',\n    onClick: () => handleClick(workImage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }, workImage.caption, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 52\n    }\n  }), /*#__PURE__*/React.createElement(Moment, {\n    format: \"MMM YYYY\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 33\n    }\n  }, workImage.date), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 84\n    }\n  })))))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"Web / Video\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"TO COME: These will open in modals on click...\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ResponsiveMasonry, {\n    columnsCountBreakPoints: {\n      1024: 1,\n      1366: 2,\n      1920: 3,\n      3840: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Masonry, {\n    gutter: \"50px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, work.filter(isBanner => isBanner.format !== 'banner').map(workImage => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"workItem\",\n    key: 'web' + workImage.album_id + workImage.image_index,\n    ref: workItemRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"masonryImg\",\n    id: workImage.album_id + workImage.image_index,\n    src: remoteLoc + workImage.album_id + '/sl/' + workImage.src,\n    alt: 'album_id: ' + workImage.album_id + workImage.image_index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 29\n    }\n  }, workImage.caption, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 52\n    }\n  }), /*#__PURE__*/React.createElement(Moment, {\n    format: \"MMM YYYY\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 33\n    }\n  }, workImage.date), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 84\n    }\n  })))))));\n} //#endregion ==================== FUNCTION: workList() ====================\n\n\nexport const WorkEA = () => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(WorkList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/shigimcp_1215/Sites/shigimcp2020-react_swept/src/work/Work_EA.jsx"],"names":["React","useRef","useEffect","Masonry","ResponsiveMasonry","Moment","gsap","work","remoteLoc","WorkList","workItemRef","masonryImgRef","handleClick","thisWorkImage","thisWorkImageID","album_id","image_index","console","log","filter","isBanner","format","map","workImage","src","caption","date","WorkEA"],"mappings":"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","sourcesContent":["//#region ==================== IMPORTS ====================\n\nimport React from 'react';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\n\nimport Masonry, { ResponsiveMasonry } from 'react-responsive-masonry';\nimport Moment from 'react-moment';\n\nimport { gsap } from 'gsap';\n\nimport '../stylesheets/Work.scss';\n\n\n//#region -------------------- IMPORTS: DATA --------------------\n\n// import work from '../data/MyData';\nimport work from '../data/json/work_json/work_ea.json';\n\n//#endregion -------------------- IMPORTS: DATA --------------------\n\n//#endregion ==================== IMPORTS ====================\n\n\nconst remoteLoc = 'https://www.shigimcp.com/Xstage/shigimcp_2020_react/img/';\n\n\n\n//#region ==================== FUNCTION: workList() ====================\n\nfunction WorkList() {\n\n\n    //#region ==================== ASSETS Ref ====================\n\n    const workItemRef = useRef(null);\n    const masonryImgRef = useRef(null);\n\n    //#endregion ==================== ASSETS Ref ====================\n\n\n\n    //#region ==================== FUNCTION: handleClick(whatIsThis ====================\n\n    function handleClick(thisWorkImage) {\n\n        let thisWorkImageID = thisWorkImage.album_id + thisWorkImage.image_index + '_imgID';\n        console.log('thisWorkImageID = thisWorkImage.album_id + thisWorkImage.image_index = ' + thisWorkImageID);\n\n    }\n\n    //#endregion ==================== FUNCTION: handleClick(whatIsThis ====================\n\n\n\n    return (\n        <div className='workList'>\n\n            <hr />\n            <h2>Banners</h2>\n            <p className='note'>\n                I want to eventually make these images clickable to trigger GSAP banners like the ones above that were [re]built in React (because I couldn't get react-adobe-animate or html-loader to work).<br />\n                Ideally, the GSAP banners will play in place like they do on this page: <a href='https://www.shigimcp.com/hilites.html' target='_new'>https://www.shigimcp.com/hilites.html</a>.<br />\n                SO FAR: <a href='./000'> See \"000\" above</a>\n            </p>\n            <hr />\n\n            <ResponsiveMasonry columnsCountBreakPoints={{ 360: 1, 640: 2, 768: 2, 940: 3, 1640: 4, 1920: 5, 3000: 6 }}>\n                <Masonry gutter='50px'>\n\n                    {work.filter(isBanner => isBanner.format === 'banner').map((workImage) => (\n\n                        <div className='workItem' key={workImage.album_id + workImage.image_index} ref={workItemRef}>\n                            <div className='masonryDiv'>\n\n                                <img\n                                    className='masonryImg'\n                                    id={workImage.album_id + workImage.image_index + '_imgID'}\n                                    src={remoteLoc + workImage.album_id + '/sl/' + workImage.src}\n                                    alt={'album_id: ' + workImage.album_id + workImage.image_index}\n                                    ref={masonryImgRef}\n                                />\n\n                                <div \n                                    className='bannerContainer' \n                                    id={workImage.album_id + workImage.image_index + '_bannerID'}\n                                    onClick={() => handleClick(workImage)}\n                                >\n                                </div>\n\n                            </div>\n\n                            <p>\n                                {workImage.caption}<br />\n                                <Moment format=\"MMM YYYY\">{workImage.date}</Moment><br />\n                            </p>\n\n                        </div>\n                    ))}\n\n                </Masonry>\n            </ResponsiveMasonry>\n\n\n            <br /><br /><br /><br /><br />\n\n            <hr />\n            <h2>Web / Video</h2>\n            <p className='note'>\n                TO COME: These will open in modals on click...\n            </p>\n            <hr />\n\n            <ResponsiveMasonry columnsCountBreakPoints={{ 1024: 1, 1366: 2, 1920: 3, 3840: 4 }}>\n                <Masonry gutter='50px'>\n\n                    {work.filter(isBanner => isBanner.format !== 'banner').map((workImage) => (\n\n                        <div className='workItem' key={'web' + workImage.album_id + workImage.image_index} ref={workItemRef}>\n\n                            <img\n                                className='masonryImg'\n                                id={workImage.album_id + workImage.image_index}\n                                src={remoteLoc + workImage.album_id + '/sl/' + workImage.src}\n                                alt={'album_id: ' + workImage.album_id + workImage.image_index}\n                            />\n\n                            <p>\n                                {workImage.caption}<br />\n                                <Moment format=\"MMM YYYY\">{workImage.date}</Moment><br />\n                            </p>\n\n                        </div>\n                    ))}\n\n                </Masonry>\n            </ResponsiveMasonry>\n\n        </div>\n    )\n}\n\n//#endregion ==================== FUNCTION: workList() ====================\n\n\nexport const WorkEA = () => {\n\n    return (\n        <>\n            <WorkList />\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}