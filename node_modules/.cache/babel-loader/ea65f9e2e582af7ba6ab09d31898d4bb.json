{"ast":null,"code":"/*!\n * @pixi/accessibility - v5.3.3\n * Compiled Tue, 04 Aug 2020 16:23:09 UTC\n *\n * @pixi/accessibility is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\n\nvar accessibleTarget = {\n  /**\n   *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n   *   shadow div with attributes set\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessible: false,\n\n  /**\n   * Sets the title attribute of the shadow div\n   * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n   *\n   * @member {?string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleTitle: null,\n\n  /**\n   * Sets the aria-label attribute of the shadow div\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleHint: null,\n\n  /**\n   * @member {number}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   * @todo Needs docs.\n   */\n  tabIndex: 0,\n\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleActive: false,\n\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleDiv: null,\n\n  /**\n   * Specify the type of div the accessible layer is. Screen readers treat the element differently\n   * depending on this type. Defaults to button.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'button'\n   */\n  accessibleType: 'button',\n\n  /**\n   * Specify the pointer-events the accessible div will use\n   * Defaults to auto.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'auto'\n   */\n  accessiblePointerEvents: 'auto',\n\n  /**\n   * Setting to false will prevent any children inside this container to\n   * be accessible. Defaults to true.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @default true\n   */\n  accessibleChildren: true,\n  renderId: -1\n}; // add some extra variables to the container..\n\nDisplayObject.mixin(accessibleTarget);\nvar KEY_CODE_TAB = 9;\nvar DIV_TOUCH_SIZE = 100;\nvar DIV_TOUCH_POS_X = 0;\nvar DIV_TOUCH_POS_Y = 0;\nvar DIV_TOUCH_ZINDEX = 2;\nvar DIV_HOOK_SIZE = 1;\nvar DIV_HOOK_POS_X = -1000;\nvar DIV_HOOK_POS_Y = -1000;\nvar DIV_HOOK_ZINDEX = 2;\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\n\nvar AccessibilityManager =\n/** @class */\nfunction () {\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n   */\n  function AccessibilityManager(renderer) {\n    /**\n     * @type {?HTMLElement}\n     * @private\n     */\n    this._hookDiv = null;\n\n    if (isMobile.tablet || isMobile.phone) {\n      this.createTouchHook();\n    } // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n\n\n    var div = document.createElement('div');\n    div.style.width = DIV_TOUCH_SIZE + \"px\";\n    div.style.height = DIV_TOUCH_SIZE + \"px\";\n    div.style.position = 'absolute';\n    div.style.top = DIV_TOUCH_POS_X + \"px\";\n    div.style.left = DIV_TOUCH_POS_Y + \"px\";\n    div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n    /**\n     * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n     *\n     * @type {HTMLElement}\n     * @private\n     */\n\n    this.div = div;\n    /**\n     * A simple pool for storing divs.\n     *\n     * @type {*}\n     * @private\n     */\n\n    this.pool = [];\n    /**\n     * This is a tick used to check if an object is no longer being rendered.\n     *\n     * @type {Number}\n     * @private\n     */\n\n    this.renderId = 0;\n    /**\n     * Setting this to true will visually show the divs.\n     *\n     * @type {boolean}\n     */\n\n    this.debug = false;\n    /**\n     * The renderer this accessibility manager works for.\n     *\n     * @member {PIXI.AbstractRenderer}\n     */\n\n    this.renderer = renderer;\n    /**\n     * The array of currently active accessible items.\n     *\n     * @member {Array<*>}\n     * @private\n     */\n\n    this.children = [];\n    /**\n     * pre-bind the functions\n     *\n     * @type {Function}\n     * @private\n     */\n\n    this._onKeyDown = this._onKeyDown.bind(this);\n    /**\n     * pre-bind the functions\n     *\n     * @type {Function}\n     * @private\n     */\n\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this._isActive = false;\n    this._isMobileAccessibility = false;\n    /**\n     * count to throttle div updates on android devices\n     * @type number\n     * @private\n     */\n\n    this.androidUpdateCount = 0;\n    /**\n     * the frequency to update the div elements ()\n     * @private\n     */\n\n    this.androidUpdateFrequency = 500; // 2fps\n    // let listen for tab.. once pressed we can fire up and show the accessibility layer\n\n    window.addEventListener('keydown', this._onKeyDown, false);\n  }\n\n  Object.defineProperty(AccessibilityManager.prototype, \"isActive\", {\n    /**\n     * A flag\n     * @member {boolean}\n     * @readonly\n     */\n    get: function () {\n      return this._isActive;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessibilityManager.prototype, \"isMobileAccessibility\", {\n    /**\n     * A flag\n     * @member {boolean}\n     * @readonly\n     */\n    get: function () {\n      return this._isMobileAccessibility;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates the touch hooks.\n   *\n   * @private\n   */\n\n  AccessibilityManager.prototype.createTouchHook = function () {\n    var _this = this;\n\n    var hookDiv = document.createElement('button');\n    hookDiv.style.width = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.height = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.position = 'absolute';\n    hookDiv.style.top = DIV_HOOK_POS_X + \"px\";\n    hookDiv.style.left = DIV_HOOK_POS_Y + \"px\";\n    hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n    hookDiv.style.backgroundColor = '#FF0000';\n    hookDiv.title = 'select to enable accessability for this content';\n    hookDiv.addEventListener('focus', function () {\n      _this._isMobileAccessibility = true;\n\n      _this.activate();\n\n      _this.destroyTouchHook();\n    });\n    document.body.appendChild(hookDiv);\n    this._hookDiv = hookDiv;\n  };\n  /**\n   * Destroys the touch hooks.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.destroyTouchHook = function () {\n    if (!this._hookDiv) {\n      return;\n    }\n\n    document.body.removeChild(this._hookDiv);\n    this._hookDiv = null;\n  };\n  /**\n   * Activating will cause the Accessibility layer to be shown.\n   * This is called when a user presses the tab key.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.activate = function () {\n    if (this._isActive) {\n      return;\n    }\n\n    this._isActive = true;\n    window.document.addEventListener('mousemove', this._onMouseMove, true);\n    window.removeEventListener('keydown', this._onKeyDown, false); // TODO: Remove casting when CanvasRenderer is converted\n\n    this.renderer.on('postrender', this.update, this);\n\n    if (this.renderer.view.parentNode) {\n      this.renderer.view.parentNode.appendChild(this.div);\n    }\n  };\n  /**\n   * Deactivating will cause the Accessibility layer to be hidden.\n   * This is called when a user moves the mouse.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.deactivate = function () {\n    if (!this._isActive || this._isMobileAccessibility) {\n      return;\n    }\n\n    this._isActive = false;\n    window.document.removeEventListener('mousemove', this._onMouseMove, true);\n    window.addEventListener('keydown', this._onKeyDown, false); // TODO: Remove casting when CanvasRenderer is converted\n\n    this.renderer.off('postrender', this.update);\n\n    if (this.div.parentNode) {\n      this.div.parentNode.removeChild(this.div);\n    }\n  };\n  /**\n   * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n   *\n   * @private\n   * @param {PIXI.Container} displayObject - The DisplayObject to check.\n   */\n\n\n  AccessibilityManager.prototype.updateAccessibleObjects = function (displayObject) {\n    if (!displayObject.visible || !displayObject.accessibleChildren) {\n      return;\n    }\n\n    if (displayObject.accessible && displayObject.interactive) {\n      if (!displayObject._accessibleActive) {\n        this.addChild(displayObject);\n      }\n\n      displayObject.renderId = this.renderId;\n    }\n\n    var children = displayObject.children;\n\n    for (var i = 0; i < children.length; i++) {\n      this.updateAccessibleObjects(children[i]);\n    }\n  };\n  /**\n   * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.update = function () {\n    /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n    *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n    *  so I am just running update every half a second, seems to fix it.\n    */\n    var now = performance.now();\n\n    if (isMobile.android.device && now < this.androidUpdateCount) {\n      return;\n    }\n\n    this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n    if (!this.renderer.renderingToScreen) {\n      return;\n    } // update children...\n\n\n    if (this.renderer._lastObjectRendered) {\n      this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n    } // TODO: Remove casting when CanvasRenderer is converted\n\n\n    var rect = this.renderer.view.getBoundingClientRect();\n    var resolution = this.renderer.resolution;\n    var sx = rect.width / this.renderer.width * resolution;\n    var sy = rect.height / this.renderer.height * resolution;\n    var div = this.div;\n    div.style.left = rect.left + \"px\";\n    div.style.top = rect.top + \"px\";\n    div.style.width = this.renderer.width + \"px\";\n    div.style.height = this.renderer.height + \"px\";\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n\n      if (child.renderId !== this.renderId) {\n        child._accessibleActive = false;\n        removeItems(this.children, i, 1);\n        this.div.removeChild(child._accessibleDiv);\n        this.pool.push(child._accessibleDiv);\n        child._accessibleDiv = null;\n        i--;\n      } else {\n        // map div to display..\n        div = child._accessibleDiv;\n        var hitArea = child.hitArea;\n        var wt = child.worldTransform;\n\n        if (child.hitArea) {\n          div.style.left = (wt.tx + hitArea.x * wt.a) * sx + \"px\";\n          div.style.top = (wt.ty + hitArea.y * wt.d) * sy + \"px\";\n          div.style.width = hitArea.width * wt.a * sx + \"px\";\n          div.style.height = hitArea.height * wt.d * sy + \"px\";\n        } else {\n          hitArea = child.getBounds();\n          this.capHitArea(hitArea);\n          div.style.left = hitArea.x * sx + \"px\";\n          div.style.top = hitArea.y * sy + \"px\";\n          div.style.width = hitArea.width * sx + \"px\";\n          div.style.height = hitArea.height * sy + \"px\"; // update button titles and hints if they exist and they've changed\n\n          if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n            div.title = child.accessibleTitle;\n          }\n\n          if (div.getAttribute('aria-label') !== child.accessibleHint && child.accessibleHint !== null) {\n            div.setAttribute('aria-label', child.accessibleHint);\n          }\n        } // the title or index may have changed, if so lets update it!\n\n\n        if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n          div.title = child.accessibleTitle;\n          div.tabIndex = child.tabIndex;\n\n          if (this.debug) {\n            this.updateDebugHTML(div);\n          }\n        }\n      }\n    } // increment the render id..\n\n\n    this.renderId++;\n  };\n  /**\n   * private function that will visually add the information to the\n   * accessability div\n   *\n   * @param {HTMLElement} div\n   */\n\n\n  AccessibilityManager.prototype.updateDebugHTML = function (div) {\n    div.innerHTML = \"type: \" + div.type + \"</br> title : \" + div.title + \"</br> tabIndex: \" + div.tabIndex;\n  };\n  /**\n   * Adjust the hit area based on the bounds of a display object\n   *\n   * @param {PIXI.Rectangle} hitArea - Bounds of the child\n   */\n\n\n  AccessibilityManager.prototype.capHitArea = function (hitArea) {\n    if (hitArea.x < 0) {\n      hitArea.width += hitArea.x;\n      hitArea.x = 0;\n    }\n\n    if (hitArea.y < 0) {\n      hitArea.height += hitArea.y;\n      hitArea.y = 0;\n    } // TODO: Remove casting when CanvasRenderer is converted\n\n\n    if (hitArea.x + hitArea.width > this.renderer.width) {\n      hitArea.width = this.renderer.width - hitArea.x;\n    }\n\n    if (hitArea.y + hitArea.height > this.renderer.height) {\n      hitArea.height = this.renderer.height - hitArea.y;\n    }\n  };\n  /**\n   * Adds a DisplayObject to the accessibility manager\n   *\n   * @private\n   * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n   */\n\n\n  AccessibilityManager.prototype.addChild = function (displayObject) {\n    //    this.activate();\n    var div = this.pool.pop();\n\n    if (!div) {\n      div = document.createElement('button');\n      div.style.width = DIV_TOUCH_SIZE + \"px\";\n      div.style.height = DIV_TOUCH_SIZE + \"px\";\n      div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n      div.style.position = 'absolute';\n      div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n      div.style.borderStyle = 'none'; // ARIA attributes ensure that button title and hint updates are announced properly\n\n      if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n        // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n        div.setAttribute('aria-live', 'off');\n      } else {\n        div.setAttribute('aria-live', 'polite');\n      }\n\n      if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n        // FireFox needs this to announce only the new button name\n        div.setAttribute('aria-relevant', 'additions');\n      } else {\n        // required by IE, other browsers don't much care\n        div.setAttribute('aria-relevant', 'text');\n      }\n\n      div.addEventListener('click', this._onClick.bind(this));\n      div.addEventListener('focus', this._onFocus.bind(this));\n      div.addEventListener('focusout', this._onFocusOut.bind(this));\n    } // set pointer events\n\n\n    div.style.pointerEvents = displayObject.accessiblePointerEvents; // set the type, this defaults to button!\n\n    div.type = displayObject.accessibleType;\n\n    if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n      div.title = displayObject.accessibleTitle;\n    } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n      div.title = \"displayObject \" + displayObject.tabIndex;\n    }\n\n    if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n      div.setAttribute('aria-label', displayObject.accessibleHint);\n    }\n\n    if (this.debug) {\n      this.updateDebugHTML(div);\n    }\n\n    displayObject._accessibleActive = true;\n    displayObject._accessibleDiv = div;\n    div.displayObject = displayObject;\n    this.children.push(displayObject);\n    this.div.appendChild(displayObject._accessibleDiv);\n    displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n  };\n  /**\n   * Maps the div button press to pixi's InteractionManager (click)\n   *\n   * @private\n   * @param {MouseEvent} e - The click event.\n   */\n\n\n  AccessibilityManager.prototype._onClick = function (e) {\n    // TODO: Remove casting when CanvasRenderer is converted\n    var interactionManager = this.renderer.plugins.interaction;\n    interactionManager.dispatchEvent(e.target.displayObject, 'click', interactionManager.eventData);\n    interactionManager.dispatchEvent(e.target.displayObject, 'pointertap', interactionManager.eventData);\n    interactionManager.dispatchEvent(e.target.displayObject, 'tap', interactionManager.eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseover)\n   *\n   * @private\n   * @param {FocusEvent} e - The focus event.\n   */\n\n\n  AccessibilityManager.prototype._onFocus = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'assertive');\n    } // TODO: Remove casting when CanvasRenderer is converted\n\n\n    var interactionManager = this.renderer.plugins.interaction;\n    interactionManager.dispatchEvent(e.target.displayObject, 'mouseover', interactionManager.eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseout)\n   *\n   * @private\n   * @param {FocusEvent} e - The focusout event.\n   */\n\n\n  AccessibilityManager.prototype._onFocusOut = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'polite');\n    } // TODO: Remove casting when CanvasRenderer is converted\n\n\n    var interactionManager = this.renderer.plugins.interaction;\n    interactionManager.dispatchEvent(e.target.displayObject, 'mouseout', interactionManager.eventData);\n  };\n  /**\n   * Is called when a key is pressed\n   *\n   * @private\n   * @param {KeyboardEvent} e - The keydown event.\n   */\n\n\n  AccessibilityManager.prototype._onKeyDown = function (e) {\n    if (e.keyCode !== KEY_CODE_TAB) {\n      return;\n    }\n\n    this.activate();\n  };\n  /**\n   * Is called when the mouse moves across the renderer element\n   *\n   * @private\n   * @param {MouseEvent} e - The mouse event.\n   */\n\n\n  AccessibilityManager.prototype._onMouseMove = function (e) {\n    if (e.movementX === 0 && e.movementY === 0) {\n      return;\n    }\n\n    this.deactivate();\n  };\n  /**\n   * Destroys the accessibility manager\n   *\n   */\n\n\n  AccessibilityManager.prototype.destroy = function () {\n    this.destroyTouchHook();\n    this.div = null;\n    window.document.removeEventListener('mousemove', this._onMouseMove, true);\n    window.removeEventListener('keydown', this._onKeyDown);\n    this.pool = null;\n    this.children = null;\n    this.renderer = null;\n  };\n\n  return AccessibilityManager;\n}();\n\nexport { AccessibilityManager, accessibleTarget };","map":{"version":3,"sources":["../src/accessibleTarget.ts","../src/AccessibilityManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DisplayObject } from '@pixi/display';\n\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\nexport interface IAccessibleTarget {\n    accessible: boolean;\n    accessibleTitle: string;\n    accessibleHint: string;\n    tabIndex: number;\n    _accessibleActive: boolean;\n    _accessibleDiv: IAccessibleHTMLElement;\n    accessibleType: string;\n    accessiblePointerEvents: PointerEvents;\n    accessibleChildren: true;\n    renderId: number;\n}\n\nexport interface IAccessibleHTMLElement extends HTMLElement {\n    type?: string;\n    displayObject?: DisplayObject;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\nexport const accessibleTarget: IAccessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     *\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    renderId: -1,\n};\n","import { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Container } from '@pixi/display';\nimport type { Renderer, AbstractRenderer } from '@pixi/core';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    public debug: boolean;\n    public renderer: AbstractRenderer|Renderer;\n\n    private _isActive: boolean;\n    private _isMobileAccessibility: boolean;\n    private _hookDiv: HTMLElement;\n    private div: HTMLElement;\n    private pool: IAccessibleHTMLElement[];\n    private renderId: number;\n    private children: DisplayObject[];\n    private androidUpdateCount: number;\n    private androidUpdateFrequency: number;\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: AbstractRenderer|Renderer)\n    {\n        /**\n         * @type {?HTMLElement}\n         * @private\n         */\n        this._hookDiv = null;\n\n        if (isMobile.tablet || isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        /**\n         * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n         *\n         * @type {HTMLElement}\n         * @private\n         */\n        this.div = div;\n\n        /**\n         * A simple pool for storing divs.\n         *\n         * @type {*}\n         * @private\n         */\n        this.pool = [];\n\n        /**\n         * This is a tick used to check if an object is no longer being rendered.\n         *\n         * @type {Number}\n         * @private\n         */\n        this.renderId = 0;\n\n        /**\n         * Setting this to true will visually show the divs.\n         *\n         * @type {boolean}\n         */\n        this.debug = false;\n\n        /**\n         * The renderer this accessibility manager works for.\n         *\n         * @member {PIXI.AbstractRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * The array of currently active accessible items.\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this.children = [];\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        this._isActive = false;\n\n        this._isMobileAccessibility = false;\n\n        /**\n         * count to throttle div updates on android devices\n         * @type number\n         * @private\n         */\n        this.androidUpdateCount = 0;\n\n        /**\n         * the frequency to update the div elements ()\n         * @private\n         */\n        this.androidUpdateFrequency = 500; // 2fps\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        window.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * A flag\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * A flag\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     *\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessability for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     *\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     *\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        window.document.addEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown, false);\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        (this.renderer as AbstractRenderer).on('postrender', this.update, this);\n\n        if ((this.renderer as AbstractRenderer).view.parentNode)\n        {\n            (this.renderer as AbstractRenderer).view.parentNode.appendChild(this.div);\n        }\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     *\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.addEventListener('keydown', this._onKeyDown, false);\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        (this.renderer as AbstractRenderer).off('postrender', this.update);\n\n        if (this.div.parentNode)\n        {\n            this.div.parentNode.removeChild(this.div);\n        }\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     *\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this.updateAccessibleObjects(children[i] as Container);\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     *\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!(this.renderer as Renderer).renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer._lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer._lastObjectRendered as Container);\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        const rect = (this.renderer as AbstractRenderer).view.getBoundingClientRect();\n\n        const resolution = this.renderer.resolution;\n\n        const sx = (rect.width / (this.renderer as AbstractRenderer).width) * resolution;\n        const sy = (rect.height / (this.renderer as AbstractRenderer).height) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${rect.left}px`;\n        div.style.top = `${rect.top}px`;\n        div.style.width = `${(this.renderer as AbstractRenderer).width}px`;\n        div.style.height = `${(this.renderer as AbstractRenderer).height}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     *\n     * @param {HTMLElement} div\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     *\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        if (hitArea.x + hitArea.width > (this.renderer as AbstractRenderer).width)\n        {\n            hitArea.width = (this.renderer as AbstractRenderer).width - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > (this.renderer as AbstractRenderer).height)\n        {\n            hitArea.height = (this.renderer as AbstractRenderer).height - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     *\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Maps the div button press to pixi's InteractionManager (click)\n     *\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        // TODO: Remove casting when CanvasRenderer is converted\n        const interactionManager = (this.renderer as AbstractRenderer).plugins.interaction;\n\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'click', interactionManager.eventData\n        );\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'pointertap', interactionManager.eventData\n        );\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'tap', interactionManager.eventData\n        );\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseover)\n     *\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        const interactionManager = (this.renderer as AbstractRenderer).plugins.interaction;\n\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'mouseover', interactionManager.eventData\n        );\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseout)\n     *\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        const interactionManager = (this.renderer as AbstractRenderer).plugins.interaction;\n\n        interactionManager.dispatchEvent((e.target as any).displayObject, 'mouseout', interactionManager.eventData);\n    }\n\n    /**\n     * Is called when a key is pressed\n     *\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     *\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /**\n     * Destroys the accessibility manager\n     *\n     */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}